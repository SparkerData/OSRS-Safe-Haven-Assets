// ===== OSRS Safe Havens — DAX Measures =====

// Assumes tables: items, prices_daily, market_index_daily, item_returns, mkt_returns, drawdowns
// If you import CSVs, set data types: price_date=Date, avg_price_gp=Decimal Number

// --- Date table (create in Power BI as a calculated table) ---
// Date = CALENDAR ( MIN ( prices_daily[price_date] ), MAX ( prices_daily[price_date] ) )

// Relationships:
// Date[Date] -> prices_daily[price_date]
// Date[Date] -> item_returns[price_date]
// Date[Date] -> mkt_returns[price_date]
// Date[Date] -> drawdowns[price_date]

// Basic measures
Total Items := DISTINCTCOUNT(items[item_id])

Avg Price (GP) := AVERAGE(prices_daily[avg_price_gp])

Daily Return := AVERAGE(item_returns[ret])

// Market index
Market Index (GP) := AVERAGE(market_index_daily[mkt_index_gp])
Market Return := AVERAGE(mkt_returns[mkt_ret])

// Rolling Volatility (30-day) — sample stddev of returns
Rolling Vol 30 := 
VAR Win =
    DATESINPERIOD ( 'Date'[Date], MAX ( 'Date'[Date] ), -30, DAY )
RETURN
    STDEVX.S(
        Win,
        CALCULATE ( [Daily Return] )
    )

// Max Drawdown (% from running peak)
// Use drawdowns view which already computes (price/peak - 1)
Max Drawdown :=
MIN ( drawdowns[drawdown] )

// Beta vs Market (approximate): cov(item, mkt)/var(mkt)
Beta := 
VAR Win = DATESINPERIOD ( 'Date'[Date], MAX ( 'Date'[Date] ), -90, DAY )
VAR MeanItem =
    AVERAGEX ( Win, CALCULATE ( [Daily Return] ) )
VAR MeanMkt =
    AVERAGEX ( Win, CALCULATE ( [Market Return] ) )
VAR Cov =
    SUMX (
        Win,
        ( CALCULATE ( [Daily Return] ) - MeanItem ) *
        ( CALCULATE ( [Market Return] ) - MeanMkt )
    )
VAR VarMkt =
    SUMX (
        Win,
        ( CALCULATE ( [Market Return] ) - MeanMkt ) ^ 2
    )
RETURN DIVIDE ( Cov, VarMkt )

// Crisis day median return (bottom 20% market days)
Crisis Median Return := 
VAR Win = DATESINPERIOD ( 'Date'[Date], MAX ( 'Date'[Date] ), -180, DAY )
VAR Threshold =
    PERCENTILEX.INC ( Win, CALCULATE ( [Market Return] ), 0.2 )
RETURN
    MEDIANX (
        FILTER ( Win, CALCULATE ( [Market Return] ) <= Threshold ),
        CALCULATE ( [Daily Return] )
    )

// Rank components (lower is better for volatility/drawdown/beta; higher is better for crisis return)
Rank Vol := RANKX ( ALL ( items[item_id], items[name] ), [Rolling Vol 30], , ASC, Dense )
Rank DD  := RANKX ( ALL ( items[item_id], items[name] ), [Max Drawdown], , DESC, Dense )  // more negative = worse; use DESC so less negative ranks higher
Rank Beta := RANKX ( ALL ( items[item_id], items[name] ), [Beta], , ASC, Dense )
Rank Crisis := RANKX ( ALL ( items[item_id], items[name] ), [Crisis Median Return], , DESC, Dense )

Safe Haven Score :=
[Rank Vol] + [Rank DD] + [Rank Beta] + [Rank Crisis]

// Convenience flags
Top 5 Safe Havens := IF ( [Safe Haven Score] <= 5 * 4 /*approx threshold depends on item count*/, 1, 0 )
